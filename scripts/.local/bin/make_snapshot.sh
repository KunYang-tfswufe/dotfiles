#!/usr/bin/env bash

# --- Dynamically Generate Output File Path ---

# 1. Get the current working directory and sanitize it for use in a filename.
#    Example: /home/imak/dotfiles -> home+imak+dotfiles
sanitized_path=$(pwd | sed 's/^\///; s/\//+/g')

# 2. Get the current timestamp, accurate to the second.
#    Example: 2023-10-27_15-30-55
timestamp=$(date +'%Y-%m-%d_%H-%M-%S')

# 3. Combine them to create the final filename.
snapshot_filename="${sanitized_path}_${timestamp}.txt"

# 4. Set the full output path to be in the user's home directory.
#    $HOME is the reliable way to refer to ~/.
output_file="$HOME/$snapshot_filename"


# --- Configuration ---
# NOTE: The output file name is now generated dynamically above.

# 1. List of directories to ignore by default (folder names)
#    All content within these directories will be skipped.
ignored_dirs=(
    .git
    .vscode
    .idea
    .obsidian
    .metadata
    .venv
    venv
    .direnv
    .envrc
    node_modules
    target
    build
    dist
    __pycache__
    "micropython-lib"
    # --- STM32CubeIDE specific folders to ignore ---
    "Debug"      # Contains compiled binaries and object files (.o, .elf)
    "Drivers"    # Contains ST's standard HAL/CMSIS library files
    ".settings"  # Contains local IDE workspace settings
)

# 2. List of files to ignore by default (full filenames or wildcards)
ignored_files=(
    "*.log"
    "*.swp"
    "*.bak"
    "*.hex"
    "$output_file" # Ensure the output file itself is not included

    # --- Add these lines to ignore license files ---
    "LICENSE"       # Ignores the exact file "LICENSE"
    "LICENSE.*"     # Ignores files like "LICENSE.md", "LICENSE.txt"
    "COPYING"       # Ignores the GNU-style license file "COPYING"
    "COPYING.*"     # Ignores files like "COPYING.LESSER"
    "NOTICE"        # Ignores the "NOTICE" file, often with Apache License
    "NOTICE.*"
    "UNLICENSE"     # Ignores the "UNLICENSE" file
    # --- STM32CubeIDE specific files to ignore ---
    "*.launch"     # IDE debug launch configurations
    "*.map"        # Linker map files
    "*.list"       # Assembly listing files

    # --- other files to ignore ---
    "ca-certificates.crt"
)
# --- Script Main Body ---

# Display the plan to the user
echo "Starting project snapshot generation..."
echo "Snapshot will be saved to: $output_file"

# Prepare ignore parameters for the find command
find_ignore_params=()
for dir in "${ignored_dirs[@]}"; do
    # -prune prevents find from entering the directory, which is very efficient
    find_ignore_params+=(-name "$dir" -prune -o)
done
for file in "${ignored_files[@]}"; do
    find_ignore_params+=(-name "$file" -prune -o)
done

# Clear or create the output file and prepare to write
# ">" will overwrite the old file
echo "# This is a project snapshot generated by the script on $(date)" > "$output_file"
echo "# Project Path: $(pwd)" >> "$output_file"
echo "----------------------------------------------------" >> "$output_file"
echo "" >> "$output_file"

# Use find to locate all matching files
# -type f: select only files
# -print0: use null characters to separate filenames for safe handling of special characters
file_list=()
while IFS= read -r -d $'\0' file; do
    file_list+=("$file")
done < <(find . "${find_ignore_params[@]}" -type f -print0)


# Check if any files were found
if [ ${#file_list[@]} -eq 0 ]; then
    echo "Warning: No matching files found in the current directory."
    # Clean up empty snapshot file
    rm "$output_file"
    exit 0
fi

echo "Found ${#file_list[@]} files. Processing..."

# Loop through and process each found file
for file in "${file_list[@]}"; do
    # --- Get the absolute path for clear identification ---
    absolute_path=$(realpath "$file")

    # Filter out binary files
    mime_type=$(file -b --mime-type "$file")
    if [[ "$mime_type" == "text/"* || "$mime_type" == "application/json" || "$mime_type" == "application/xml" || "$mime_type" == "application/javascript" || "$mime_type" == "application/x-sh" || "$mime_type" == "application/x-c" || "$mime_type" == "application/x-c++" ]]; then
        # It's a text file, process it

        # 1. Write the file path header to the output file using the absolute path
        echo "--- START OF FILE: $absolute_path ---" >> "$output_file"
        echo "" >> "$output_file" # Add a blank line

        # 2. Append the file content to the output file
        cat "$file" >> "$output_file"

        # 3. Write the end marker and separator after the content
        echo "" >> "$output_file" # Add a blank line
        echo "--- END OF FILE: $absolute_path ---" >> "$output_file"
        echo -e "\n\n" >> "$output_file" # Use two newlines to separate files

        echo "  - Processed: $absolute_path"
    else
        # It's a binary file, skip it
        echo "  - (Binary file, ignored): $absolute_path"
    fi
done

# Use double quotes to correctly display the full path in the final message
echo "Done! All text file contents have been merged into \"$output_file\"."
